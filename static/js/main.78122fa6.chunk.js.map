{"version":3,"sources":["modules/users.ts","utils/api.ts","redux/configureStore.ts","redux/createRootReducer.ts","components/UserList/index.tsx","components/UserList/UserList.tsx","components/routes/Home.tsx","components/routes/Users.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ACTION","http","request","Promise","resolve","fetch","then","response","json","body","initialState","list","loading","error","reducer","state","action","type","USERS_REQUEST","USERS_SUCCESS","payload","userListSelector","createSelector","users","history","createBrowserHistory","configureStore","preloadedState","createStore","combineReducers","router","connectRouter","usersReducer","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","UserList","userList","useSelector","shallowEqual","dispatch","useDispatch","onClick","a","console","log","map","user","name","Home","Users","App","to","activeStyle","color","path","component","Boolean","window","location","hostname","match","store","ReactDOM","render","StrictMode","context","ReactReduxContext","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sJASYA,E,+GCCGC,EAVF,SAAIC,GACf,OAAO,IAAIC,SAAQ,SAACC,GAClBC,MAAMH,GACHI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLL,EAAQK,W,SDIJT,K,sCAAAA,E,sCAAAA,E,uCAAAA,M,KAqBZ,IAAMU,EAA2B,CAC/BC,KAAM,GACNC,SAAS,EACTC,MAAO,IAGHC,EAA2C,WAG3C,IAFJC,EAEG,uDAFKL,EACRM,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKjB,EAAOkB,cACV,OAAO,2BACFH,GADL,IAEEH,SAAS,IAEb,KAAKZ,EAAOmB,cACV,OAAO,2BACFJ,GADL,IAEEJ,KAAMK,EAAOI,QACbR,SAAS,IAEb,QACE,OAAOG,IASAM,EAAmBC,aADH,SAACP,GAAD,OAAkCA,EAAMQ,SAGnE,SAACR,GAAD,OAAWA,EAAMJ,QEzDNa,EAAUC,cAiBRC,EAfQ,SAACC,GACtB,ICLgCH,EDgBhC,OAXcI,uBCLkBJ,EDMZA,ECLbK,0BAAgB,CACrBC,OAAQC,YAAcP,GACtBD,MAAOS,KDIPL,EACAM,8BACEC,0BACEC,YAAiBX,GACjBY,Q,iBEdOC,ECEY,WACzB,IAAMC,EAAWC,YAAYlB,EAAkBmB,KACzCC,EAAWC,cAIjB,OACE,2BACE,0BAAQzB,KAAK,SAAS0B,QAJN,kBAAMF,EL4E1B,uCAAO,WAAOA,GAAP,eAAAG,EAAA,6DACLH,EAAS,CACPxB,KAAMjB,EAAOkB,gBAFV,SAIkBjB,EACrB,8CALG,OAICqC,EAJD,OAOLO,QAAQC,IAAI,WAAYR,GACxBG,EAAS,CACPxB,KAAMjB,EAAOmB,cACbC,QAASkB,IAVN,2CAAP,yDKxEI,iBAIA,0BACGA,EAASS,KAAI,SAACC,GAAD,OACZ,0BAAKA,EAAKC,Y,eCZLC,EAJQ,WACrB,OAAO,mCCGMC,EAJS,WACtB,OAAO,oCCuBMC,EApBO,kBACpB,2BACE,2BACE,gBAAC,IAAD,CAASC,GAAG,QAAQC,YAAa,CAAEC,MAAO,QAA1C,QAGA,gBAAC,IAAD,CAASF,GAAG,SAASC,YAAa,CAAEC,MAAO,QAA3C,UAIF,2BACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWP,IAC/B,gBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWN,MAGpC,gBAAC,EAAD,QCVgBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQrC,IAEdsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUH,MAAOA,EAAOI,QAASC,KAC/B,kBAAC,IAAD,CAAiB5C,QAASA,EAAS2C,QAASC,KAC1C,kBAAC,EAAD,SAINC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnE,MAAK,SAACoE,GACLA,EAAaC,gBAEdC,OAAM,SAAC/D,GACNgC,QAAQhC,MAAMA,EAAMgE,c","file":"static/js/main.78122fa6.chunk.js","sourcesContent":["import { Reducer } from 'redux';\nimport { createSelector } from 'reselect';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from 'redux/createRootReducer';\nimport http from 'utils/api';\n\n/**\n * Constants\n */\nexport enum ACTION {\n  USERS_REQUEST = '@@users/USERS_REQUEST',\n  USERS_SUCCESS = '@@users/USERS_SUCCESS',\n  USERS_FAILURE = '@@users/USERS_FAILURE',\n}\n\n/**\n * Reducer\n */\nexport interface UsersState {\n  readonly list: User[];\n  readonly loading: boolean;\n  readonly error: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n}\n\nconst initialState: UsersState = {\n  list: [],\n  loading: false,\n  error: '',\n};\n\nconst reducer: Reducer<UsersState, ActionType> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case ACTION.USERS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case ACTION.USERS_SUCCESS:\n      return {\n        ...state,\n        list: action.payload,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\nexport { reducer as usersReducer };\n\n/**\n * Selectors\n */\nexport const stateSelector = (state: RootState): UsersState => state.users;\nexport const userListSelector = createSelector(\n  stateSelector,\n  (state) => state.list,\n);\n\n/**\n * Action Creators\n */\ninterface UserRequest {\n  type: typeof ACTION.USERS_REQUEST;\n}\n\ninterface UserSuccess {\n  type: typeof ACTION.USERS_SUCCESS;\n  payload: User[];\n}\n\ntype ActionType = UserRequest | UserSuccess;\n\ntype ThunkResult<R> = ThunkAction<R, RootState, void, ActionType>;\n\nexport const fetchUserList = (): ThunkResult<void> => {\n  return async (dispatch) => {\n    dispatch({\n      type: ACTION.USERS_REQUEST,\n    });\n    const userList = await http<User[]>(\n      'https://jsonplaceholder.typicode.com/users',\n    );\n    console.log('userList', userList);\n    dispatch({\n      type: ACTION.USERS_SUCCESS,\n      payload: userList,\n    });\n  };\n};\n","const http = <T>(request: RequestInfo): Promise<T> => {\n  return new Promise((resolve) => {\n    fetch(request)\n      .then((response) => response.json())\n      .then((body) => {\n        resolve(body);\n      });\n  });\n};\n\nexport default http;\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, createStore, AnyAction, Store } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport { createRootReducer, RootState } from 'redux/createRootReducer';\n\nexport const history = createBrowserHistory();\n\nconst configureStore = (preloadedState?: RootState): Store => {\n  const store = createStore(\n    createRootReducer(history),\n    preloadedState,\n    composeWithDevTools(\n      applyMiddleware(\n        routerMiddleware(history),\n        thunk as ThunkMiddleware<RootState, AnyAction>,\n      ),\n    ),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { usersReducer } from '../modules/users';\n\nexport const createRootReducer = (history: History) => {\n  return combineReducers({\n    router: connectRouter(history),\n    users: usersReducer,\n  });\n};\n\nexport type RootState = ReturnType<ReturnType<typeof createRootReducer>>;\n","import UserList from './UserList';\n\nexport default UserList;\n","import * as React from 'react';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { userListSelector, fetchUserList } from 'modules/users';\n\nconst UserList: React.FC = () => {\n  const userList = useSelector(userListSelector, shallowEqual);\n  const dispatch = useDispatch();\n\n  const handleClick = () => dispatch(fetchUserList());\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleClick}>\n        GET USER LIST\n      </button>\n\n      <ul>\n        {userList.map((user) => (\n          <li>{user.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default UserList;\n","import * as React from 'react';\n\nconst Home: React.FC = () => {\n  return <h1>Home</h1>;\n};\n\nexport default Home;\n","import * as React from 'react';\n\nconst Users: React.FC = () => {\n  return <h1>Users</h1>;\n};\n\nexport default Users;\n","import * as React from 'react';\nimport UserList from 'components/UserList';\nimport { Route, NavLink, Switch } from 'react-router-dom';\nimport Home from 'components/routes/Home';\nimport Users from 'components/routes/Users';\n\nconst App: React.FC = () => (\n  <div>\n    <div>\n      <NavLink to=\"/home\" activeStyle={{ color: 'red' }}>\n        Home\n      </NavLink>\n      <NavLink to=\"/users\" activeStyle={{ color: 'red' }}>\n        Users\n      </NavLink>\n    </div>\n    <div>\n      <Switch>\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/users\" component={Users} />\n      </Switch>\n    </div>\n    <UserList />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport configureStore, { history } from 'redux/configureStore';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore(/* provide initial state if any */);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} context={ReactReduxContext}>\n      <ConnectedRouter history={history} context={ReactReduxContext}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}